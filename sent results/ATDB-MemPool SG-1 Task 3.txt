Improvement:

As hinted at in the description of task 2.2 , preventing unnecessary calls 
to the clib-realloc is a straight-forward way to improve performance. 
To achieve this goal, we allow the call to realloc in the method 'this_realloc'
of the pool-strategy 'magic.c' , only in case if the memory block of the respective 
pointer is pointing to needs to be expanded, that is, if the new data size 
(which is random up to a size of 2048 bits) exceeds the size 
of the old data. In case of contraction, there's no need to use the clib-function, as
the new data comfortably fits into the allotted memory. 
In order to do so, we leveraged the 'pool_ptr_info'-struct, which keeps meta-information
about a accompanying 'data_ptr_t'-object, i.e. the 'bytes_total' of memory space allocated,
by using a simple branch in line 69 of the code (to be found at our repository 
https://github.com/RAO-29/SG-1-Memory-Pooling/blob/master/src/core/mem/pools/magic.c): 

if ( info->bytes_total < nbytes ) { 

This means, that the memory pointed to by the (clib-)pointer needs to expand if evaluates to true.
In this case, the implementation proceeds as before. If it evaluates to false, there's no reallocation
and the execution proceeds at line 88 of the method,

return ptr;

which just returns the parameter from the input. 


Why?

KISS. Keep it simple, sport. There's no need to re-test the reused parts of the implementation.
Also, we are leveraging the provided framework by using the meta-data which would be 
unnecesssary overhead otherwise (just judging from the local perspective of 'magic.c').


Assumptions:

- The comparison of 'info->bytes_total' (type 'int') and 'nbytes' (type 'unsigned long') works in the given case
- 'info->bytes_used' =< 'info->bytes_total' always holds, thus only 'info->bytes_total' is important for  expansion
- Partially filled, allocated memory doesn't corrupt the 'useful' data and doesn't impede using the latter, i.e.
'info->bytes_used' < 'info->bytes_total' is unproblematic
- In case of equality of old and new size, there's no need to call realloc either ( see https://stackoverflow.com/a/18617869 )


Advantages:

+ Performance is improved by lessening the workload, not by introducing more complex code or data structure.
+ Re-use of proven implementation.
+ Easy to read, easy to understand, easy to maintain.

Disadvantages: 

- Potentially leaves lots of 'cruft' or 'data debris' in the heap, that is, data not used and thus memory space wasted.
- Solution hasn't been tested with 'real' data instead of just a benchmark environment.